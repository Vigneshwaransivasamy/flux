!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.fluxi={})}(this,function(t){"use strict";function e(t){var e=[],r=t.length;let n=0;for(;r>n;)e.push(t[n]),n++;return e}function r(t,e){return function(){return e.call(this,t.apply(this,arguments))}}function n(t,e){return function(){return new Promise((r,n)=>(t.apply(this,arguments).then(function(t){r(e.call(this,t))}).catch(n),e))}}function o(){var t;f(arguments[0])?(t=arguments[0],Array.prototype.shift.call(arguments)):t=!0;var e=arguments,o=0,i=arguments.length,c=arguments[0],u=t?r:n;if(1==i)return arguments[0];if(2==i)return u(e[0],e[1]);for(;i-1>o;)c=u(c,e[o+1]),o++;return c}function i(t){for(var e="",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-",n=0;t>n;n++)e+=r.charAt(Math.floor(64*Math.random()));return e}function c(t,e){for(var r in t)p(t[r])&&(t[r]=l(t[r],e));return t}function u(t,e){return t.subscribe=function(t){if(a(Function)(t)){var r=y();return e.set(r,t),r}return Error("Type Error: subscriber should be of type Function")},t.unsubscribe=function(t){return e.has(t)?e.delete(t):Error("Type Error: subscriber should be of type Function")},t}function l(t,e){function r(t){o.forEach(function(e){e(t)})}var n=!e,o=e||new Map,i={get:function(t,e){return t[e]},set:function(t,e,n){var i=null,c=null,u={};if(t[e]){if(i="UPDATE",(c=t[e])==n)return;t[e]=n}else i="NEW",t[e]=b(n)?n:l(n,o);return u={action:i,actionRoot:t,key:e,value:n},"update"==i&&(u.oldValue=c),r(u),t[e]}};return t=new Proxy(c(t,o),i),n?u(t,o):t}const a=t=>e=>Object(e)instanceof t,f=t=>a(Boolean)(t);var s=Object.prototype.toString;const p=t=>"[object Object]"===s.call(t),b=t=>a(String)(t);var y=()=>i(32);var d=Object.prototype.toString;var h=Object.prototype.toString;var j=Object.prototype.toString;var v=Object.prototype.toString;var g=Object.prototype.toString;var m=Object.prototype.toString;t.curry=function(t){return function(){return t.length==arguments.length?t(...arguments):t.bind(null,...arguments)}},t.debug=function(...t){var r=e(t);r.splice(0,0,window.performance?" : "+(window.performance.now()/1e3).toFixed(3)+": ":" : "+Date()+" : "),console.log(...r)},t.filler=function(){return"__EMPTY__"},t.pipe2=r,t.pipeN=o,t.syncPipe2=n,t.syncPipeN=function(){return Array.prototype.unshift.call(arguments,!1),o.apply(this,arguments)},t.proxr=l,t.is=a,t.isArray=(t=>a(Array)(t)),t.isBoolean=f,t.isDate=(t=>"[object Date]"===d.call(t)),t.isFunction=(t=>a(Function)(t)),t.isNaN=(t=>"[object NaN]"===h.call(t)),t.isNull=(t=>"[object Null]"===j.call(t)),t.isNumber=(t=>a(Number)(t)),t.isObject=p,t.isPromise=(t=>"[object Promise]"===v.call(t)),t.isRegex=(t=>a(RegExp)(t)),t.isString=b,t.isSymbol=(t=>"[object Symbol]"===g.call(t)),t.isUndefined=(t=>"[object Undefined]"===m.call(t)),Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
